
#------------------------------------------------------------------------------#
Configuration Management Tool : Chef
#------------------------------------------------------------------------------#
What is Configuration Management?

Chef is an open-source infrastructure Automation framework that enables you to
define the state of your systems and automatically keep them that way.

Chef is code. Built on the Ruby programming language,
Chef recipes are meant to be simple and descriptive.

Chef can run on Windows, macOS, and many Linux distributions.

Although you can use Chef to configure almost any system.

Chef allows DevOps to spin off dozens or hundreds of server instances in less
time.

#------------------------------------------------------------------------------#
Chef Basics :

You can use Chef in any datacenter or cloud infrastructure.

It runs on several platforms, including Windows; enterprise Linux distributions;
AIX; FreeBSD; Solaris; Cisco IO; and Nexus.

Chef supports cloud platforms including
1. Amazon Web Services (AWS),
2. Google Cloud Platform,
3. OpenStack,
4. IBM Bluemix,
5. HPE Cloud,
6. Microsoft Azure,
7. VMware vRealize Automation, and
8. Rackspace.

The Chef workflow starts with a team’s developers and system administrators
defining a task to automate.

The recipes and cookbooks capture the process, and are tested using tools like
Test Kitchen, ChefSpec, and Foodcritic.

Once they’re working properly, the recipes and cookbooks are deployed to the
Chef server using the knife and chef command-line tools.

A typical Chef deployment comprises three core components:
the Chef server, workstations, and nodes.

On workstations, you create and edit the Chef recipes,
which are stored in cookbooks.

As the name suggests, a Chef cookbook is a collection of related recipes that
include configuration data and policy distribution.

The workstation also stores a library of your infrastructure’s configuration
documents.

When you’re happy with your recipes, you save them to the Chef server using
Chef Knife.

The Chef server is the repository for recipes, cookbooks, node policies, roles,
environments, and node metadata.

Policies map the organization’s business and operational requirements, process,
and workflow to settings and objects stored on the server.

Roles define server types, such as “web server” or “database server.”

Environments define the type of process, such as dev, staging, or production.

In short, the Chef server holds all your infrastructure’s configuration data.

#------------------------------------------------------------------------------#
Chef for DevOps:

Chef applies a continuous delivery model to the software release cycle by
automating its workflow.

System administration tasks are saved as cookbooks and recipes,
reusable configuration steps toward a desired state.

Chef has wide industry support across the cloud ecosystem,
and works with just about every platform you can think of.
#------------------------------------------------------------------------------#
Chef Fundamentals or Chef RoadMap :


1. Local Development

&

2. Cloud Development

Concepts :

Part-I:

1. Configuration Management
2. Chef Resources
3. Cookbooks
4. Chef Client & Convergence
5. Ohai
6. Templates
7. ChefDK

Part-II :
8. Chef Server
9. Supermarket
10. Custom cookbooks
11. Managing Nodes
12. Roles & Runlist
13. Indexing & Search
14. Cookbook Versions with Environments
15. Databags
#------------------------------------------------------------------------------#
1. Local Development Environment:

On MacOS/Windows :

Download, Install & Configure :

1. Text Editors : ATOM  (https://atom.io/)

2. Source Code Management Tool  :  Git (http://git-scm.com/downloads)

3. Integrated Development Tool : Visual Studio Code (https://code.visualstudio.com/)

4. Configuration Management Tool : Chef

5. Virtualisation Tool : Oracle Virtualbox (https://www.virtualbox.org/)

6. 3rd Party SSH Tools : Putty, Puttygen, WinScp, &
Cmder (https://github.com/cmderdev/cmder/releases/download/v1.3.11/cmder.zip)

7. Build and Manage Virtual Machines : Vagrant (https://www.vagrantup.com/downloads.html)
#------------------------------------------------------------------------------#
Download, Install and Configure Chef Development Kit(ChefDK) on MacOS:

STEP-1 : Chef Development Kit (Version 3.2.30)

https://downloads.chef.io/

$ chef --version
Chef Development Kit Version: 3.2.30
chef-client version: 14.4.56
delivery version: master (6862f27aba89109a9630f0b6c6798efec56b4efe)
berks version: 7.0.6
kitchen version: 1.23.2
inspec version: 2.2.70

$ chef --version
$ chef-client --version
$ knife --version
$ ohai --version
$ berks --version
$ kitchen --version
$ foodcritic --version
$ cookstyle --version

STEP-2 : Virtualisation Tool :

Oracle Virtualbox (https://www.virtualbox.org/)

STEP-3 : Build and Manage Virtual Machines :

Vagrant (https://www.vagrantup.com/downloads.html)

STEP-4 : Text Editors :

ATOM  (https://atom.io/)

STEP-5 : Source Code Management Tool  :

Git (http://git-scm.com/downloads)

STEP-6 : 3rd Party SSH Tools : Putty, Puttygen, WinScp, &
Cmder (https://github.com/cmderdev/cmder/releases/download/v1.3.11/cmder.zip)

STEP-7 : Integrated Development Tool : Pycahrm, VSTS,

Visual Studio Code (https://code.visualstudio.com/)
#------------------------------------------------------------------------------#
Setup Lab Environment with Vagrant :
(file:///Users/keshavkummari/Downloads/Vagrant-VirtualBox-Setup.pdf)

Chef Workflow :

When building and testing Chef code a normal workflow involves managing servers
directly from your workstation.

In this class, you’ll start by logging into a server directly to get to know the
 way Chef works.

In the second half of class, we’ll manage remote servers (nodes) using a workstation
connected to a Chef Server.

For now, we’ll start by managing a node using Vagrant and VirtualBox

Objectives:
• Check pre-reqs
• Verify your ssh client
• Install VirtualBox
• Install Vagrant
• Launch Centos VM

Ensure your system meets the minimum requirements :

1. Supports virtualisation. This is typically enabled in your BIOS

2. Meets the minimum requirements to run VirtualBox

3. Has at least 5GB of hard-disk space available

4. Has at least 512MB RAM available for each VM you would like to run
(this class may have a maximum of 3 VM’s running at any time,
so please ensure you have at least 1.5GB RAM available)

5. If using VMware Fusion, ensure nested virtualisation is enabled

Note : Class Workflow

For the first half of the class we will log into a Vagrant instance and
work with Chef by directly managing the virtual machine.

On the virtual CentOS instance we will install the Chef Development Kit (ChefDK)
and write code using a command-line text editor, like Vi, Emac or Nano.

In the second half of the class we will manage several Vagrant instances
remotely using a Chef Server.

For these exercises we will be using your local machine, where the
ChefDK will also be installed.

STEP-1 : Go to Local Machine(Laptop/Desktop) and Verify Vagrant :

$ vagrant -v
Vagrant 2.2.1

STEP-2 : Go to Local Machine(Laptop/Desktop) and Verify ChefDK :

$ chef --version
Chef Development Kit Version: 3.2.30
chef-client version: 14.4.56
delivery version: master (6862f27aba89109a9630f0b6c6798efec56b4efe)
berks version: 7.0.6
kitchen version: 1.23.2
inspec version: 2.2.70


STEP-4 : Register & Login to Vagrantup.com :

UserName : keshav.kummari@gmail.com
PassWord :

https://app.vagrantup.com/


$ vagrant login
WARNING: This command has been deprecated and aliased to `vagrant cloud auth login`
In a moment we will ask for your username and password to HashiCorp's
Vagrant Cloud. After authenticating, we will store an access token locally on
disk. Your login details will be transmitted over a secure connection, and
are never stored on disk locally.

If you do not have an Vagrant Cloud account, sign up at
https://www.vagrantcloud.com

Vagrant Cloud username or email: keshav.kummari@gmail.com
Password (will be hidden):
Token description (Defaults to "Vagrant login from Keshavs-MacBook-Pro.local"):
You are now logged in.
$


#------------------------------------------------------------------------------#
Vagrant boxes are just "Templates"
Boxes contain our base operating systems already setup.
Manage boxes such as:
# vagrant box list
# vagrant box add
# vagrant box remove

To see the list of the boxes are in the OS:

$ vagrant box list
bento/centos-7      (virtualbox, 201808.24.0)
bento/centos-7.2    (virtualbox, 2.3.1)
bento/centos-7.5    (virtualbox, 201808.24.0)
centos/7            (virtualbox, 1804.02)
centos/7            (virtualbox, 1809.01)
centos/7            (virtualbox, 1811.02)
clicars/ubuntu18lts (virtualbox, 2)
hashicorp/precise64 (virtualbox, 1.1.0)
ubuntu/trusty64     (virtualbox, 20181203.0.1)
ubuntu/xenial64     (virtualbox, 20180525.0.0)

To remove a box :
$ vagrant box remove bento/centos-7.2

$ vagrant status
/opt/vagrant/embedded/gems/2.2.1/gems/vagrant-2.2.1/lib/vagrant/util/which.rb:37:
warning: Insecure world writable dir /Users/keshavkummari in PATH, mode 040777
Current machine states:

default                   not created (virtualbox)

The environment has not yet been created. Run `vagrant up` to
create the environment. If a machine is not created, only the
default provider will be shown. So if a provider is not listed,
then the machine is not created for that environment.


Vagrant Commands:

Usage: vagrant box <subcommand> [<args>]

Available subcommands:
     add
     list
     outdated
     prune
     remove
     repackage
     update
#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
Chef Environment Setup on MacOS using Vagrant:

Go to Local Machine(Laptop/Desktop) and Verify VirtualBox :

$ VBoxManage --version
5.2.20r125813

Create a Workstation :
$ pwd
/Users/keshavkummari/chef_kk
$ ls -lrt
$
$ mkdir chefdk
$ mkdir chefserver
$ mkdir chefnode
$ ls -lrta
total 0
drwxrwxrwx+ 109 keshavkummari  staff  3488 Jan  9 13:02 ..
drwxr-xr-x    2 keshavkummari  staff    64 Jan  9 13:15 chefdk
drwxr-xr-x    2 keshavkummari  staff    64 Jan  9 13:15 chefserver
drwxr-xr-x    2 keshavkummari  staff    64 Jan  9 13:15 chefnode

#------------------------------------------------------------------------------#
Operating System : Linux

Distribution : CentOS

Version : 7.2

Build and Manage Virtual Machines : Vagrant

Virtualisation Tool : Oracle Virtualbox

Requirement:

1. ChefDK Server :

Path      : /Users/keshavkummari/chef_kk/chefdk
Hostname  : chefdk.keshavkummari.com
IPaddress : 192.168.33.10

2. ChefServer :

Path      : /Users/keshavkummari/chef_kk/chefserver
Hostname  : chefserver.keshavkummari.com
IPaddress : 192.168.33.11

3. Chefnode1 :

Path      : /Users/keshavkummari/chef_kk/chefnode1
Hostname  : chefnode1.keshavkummari.com
IPaddress : 192.168.33.12
#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
Note : Below Steps are for common for ChefDK, ChefServer & Chefnode1
#------------------------------------------------------------------------------#
Path      : /Users/keshavkummari/chef_kk/

STEP-1 : Go to Local Machine(Laptop/Desktop) & Download a CentOS7.2 Vagrant box:

$ vagrant box add bento/centos-7.2 --provider=virtualbox

OR

Start the Vagrant box:

$ vagrant init bento/centos-7.2

$ pwd
/Users/keshavkummari/chef_kk/chefdk
$ vagrant init bento/centos-7.2
A `Vagrantfile` has been placed in this directory. You are now
ready to `vagrant up` your first virtual environment! Please read
the comments in the Vagrantfile as well as documentation on
`vagrantup.com` for more information on using Vagrant.

$ vi Vagrantfile

$ grep -n 'config.vm.network' Vagrantfile
26:  config.vm.network "forwarded_port", guest: 80, host: 8080
31:  config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"
35:  config.vm.network "private_network", ip: "192.168.33.10"
40:  # config.vm.network "public_network"

Note: Uncoment the "config.vm.network"

STEP-2 : Spin up a CentOS7.x using Vagrant :

$ vagrant up

STEP-3 : Log Into the CentOS 7.2 Instance

$ vagrant status

$ vagrant ssh
#------------------------------------------------------------------------------#
Manage Your Vagrant Instance :

Run these common commands in the same directory as your Vagrantfile:

Creates a Vagrantfile, used to specify virtual machine settings
# vagrant init

Spins up the virtual machine using the Vagrantfile
# vagrant up

List connection details for running instances:
# vagrant ssh-config

Lists virtual machines and current status. ‘running’ means machine is available for ssh
# vagrant status

Save machine state and shut down
# vagrant suspend

Destroy all running virtual machines
# vagrant destroy --force

#------------------------------------------------------------------------------#
Terminal-0 : Local Machine :

# mkdir chef
# cd chef
# pwd

#------------------------------------------------------------------------------#
Terminal-1 : chefdk (192.168.33.10 chefdk.keshavkummari.com)


$ cd /Users/keshavkummari/chef_kk/chefdk

$ vagrant ssh

STEP-0 : Instal Utility Commands :

# sudo yum install vim* curl* wget* elinks* unzip* -y

STEP-1 :

[vagrant@chefdk ~]$ curl https://omnitruck.chef.io/install.sh | sudo bash -s -- -P chefdk
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 23103  100 23103    0     0  37393      0 --:--:-- --:--:-- --:--:-- 37444
el 7 x86_64
Getting information for chefdk stable  for el...
downloading https://omnitruck.chef.io/stable/chefdk/metadata?v=&p=el&pv=7&m=x86_64
  to file /tmp/install.sh.12430/metadata.txt
trying wget...
sha1	5cc203820320ea885fce7d000f429c785de00fdf
sha256	44a073923c1607c4a7fbd31f6838c26edf3f1831117d79c4bffdd15263da5cf5
url	https://packages.chef.io/files/stable/chefdk/3.6.57/el/7/chefdk-3.6.57-1.el7.x86_64.rpm
version	3.6.57
downloaded metadata file looks valid...
downloading https://packages.chef.io/files/stable/chefdk/3.6.57/el/7/chefdk-3.6.57-1.el7.x86_64.rpm
  to file /tmp/install.sh.12430/chefdk-3.6.57-1.el7.x86_64.rpm
trying wget...
Comparing checksum with sha256sum...

WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING

You are installing an omnibus package without a version pin.  If you are installing
on production servers via an automated process this is DANGEROUS and you will
be upgraded without warning on new releases, even to new major releases.
Letting the version float is only appropriate in desktop, test, development or
CI/CD environments.

WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING

Installing chefdk
installing with rpm...
warning: /tmp/install.sh.12430/chefdk-3.6.57-1.el7.x86_64.rpm: Header V4 DSA/SHA1 Signature, key ID 83ef826a: NOKEY
Preparing...                          ################################# [100%]
Updating / installing...
   1:chefdk-3.6.57-1.el7              ################################# [100%]
Thank you for installing Chef Development Kit!


STEP-2 :

[vagrant@chefdk ~]$ chef -v
Chef Development Kit Version: 3.6.57
chef-client version: 14.8.12
delivery version: master (5fb4908da53579c9dcf4894d4acf94d2d9ee6475)
berks version: 7.0.7
kitchen version: 1.24.0
inspec version: 3.2.6

STEP-3 :

#------------------------------------------------------------------------------#
Terminal-2 : chefserver (192.168.33.11 chefserver.keshavkummari.com)

$ cd  /Users/keshavkummari/chef_kk/chefserver

$ vagrant ssh


STEP-0 : Instal Utility Commands :

# sudo yum install vim* curl* wget* elinks* unzip* -y

#------------------------------------------------------------------------------#
Terminal-3 : chefnode1 (192.168.33.12 chefnode1.keshavkummari.com)

$ cd  /Users/keshavkummari/chef_kk/chefnode1

$ vagrant ssh

STEP-0 : Instal Utility Commands :

# sudo yum install vim* curl* wget* elinks* unzip* -y


#------------------------------------------------------------------------------#
On ChefDK Server :
#------------------------------------------------------------------------------#
Your First Chef Recipe :

Create a File and add

[vagrant@chefdk ~]$ pwd
/home/vagrant

[vagrant@chefdk ~]$ vi hello.rb

[vagrant@chefdk ~]$ ls -lrta
-rw-rw-r--. 1 vagrant vagrant   50 Jan  9 13:41 hello.rb

[vagrant@chefdk ~]$ cat hello.rb
file '/hello.txt' do
	content 'Hello, World'
end

[vagrant@chefdk ~]$ sudo chef-client --local-mode hello.rb
[2019-01-09T13:42:29+00:00] WARN: No config file found or specified on command line, using command line options.
[2019-01-09T13:42:29+00:00] WARN: No cookbooks directory found at or above current directory.  Assuming /home/vagrant.
Starting Chef Client, version 14.8.12
resolving cookbooks for run list: []
Synchronizing Cookbooks:
Installing Cookbook Gems:
Compiling Cookbooks...
[2019-01-09T13:42:36+00:00] WARN: Node chefdk.keshavkummari.com has an empty run list.
Converging 1 resources
Recipe: @recipe_files::/home/vagrant/hello.rb
  * file[/hello.txt] action create
    - create new file /hello.txt
    - update content in file /hello.txt from none to 03675a
    --- /hello.txt	2019-01-09 13:42:36.163304764 +0000
    +++ /.chef-hello20190109-12638-12uoupa.txt	2019-01-09 13:42:36.161304764 +0000
    @@ -1 +1,2 @@
    +Hello, World
    - restore selinux security context

Running handlers:
Running handlers complete
Chef Client finished, 1/1 resources updated in 05 seconds


[vagrant@chefdk ~]$ ls -lrt /hello.txt
-rw-r--r--. 1 root root 12 Jan  9 13:42 /hello.txt

[vagrant@chefdk ~]$ cat /hello.txt
Hello, World[vagrant@chefdk ~]$


#------------------------------------------------------------------------------#
Chef Resources :

https://docs.chef.io/resource_file.html

Resource Definition:

file 'hello.txt' do
  content 'Hello, World'
end

File : Type

hello.txt : Name

content 'Hello, World' : Properties

NOTE : The TYPE named NAME should be ACTION'd with PROPERTIES

file 'hello.txt' do
  content 'Hello, World'
  action  :create
end

Note: If no Action is listed, then the default action is applied.
#------------------------------------------------------------------------------#
Example : Package

package 'httpd' do
  action :install
end

Example : Service

service 'ntp' do
  action [ :enable, :start ]
end

Example : File

file '/etc/motd' do
  content 'This computer is the property of Keshav Kummari'
end

Example : File

file '/etc/php.ini.default' do
  action :delete
end
#--------------Convergence and Desired State-----------------------------------#
Test and Repair :

STEP-1 : Go to ChefDK Server :

[vagrant@chefdk ~]$ pwd
/home/vagrant

[vagrant@chefdk ~]$ ls -lrt hello.rb
-rw-rw-r--. 1 vagrant vagrant 50 Jan  9 13:41 hello.rb

[vagrant@chefdk ~]$ cat hello.rb
file '/hello.txt' do
	content 'Hello, World'
end

STEP-2 : Append the hello.txt file manually and execute the
chef-client and validate the changes :

[vagrant@chefdk ~]$ cat hello.rb
file '/hello.txt' do
	content 'Hello, World'
end

[root@chefdk vagrant]# echo "Welcome to Configuration Management by Keshav Kummari" >> /hello.txt

[vagrant@chefdk ~]$ cat /hello.txt
Hello, WorldWelcome to Configuration Management by Keshav Kummari

[vagrant@chefdk ~]$ sudo chef-client --local-mode hello.rb
[2019-01-09T14:33:19+00:00] WARN: No config file found or specified on command line, using command line options.
[2019-01-09T14:33:19+00:00] WARN: No cookbooks directory found at or above current directory.  Assuming /home/vagrant.
Starting Chef Client, version 14.8.12
resolving cookbooks for run list: []
Synchronizing Cookbooks:
Installing Cookbook Gems:
Compiling Cookbooks...
[2019-01-09T14:33:23+00:00] WARN: Node chefdk.keshavkummari.com has an empty run list.
Converging 1 resources
Recipe: @recipe_files::/home/vagrant/hello.rb
  * file[/hello.txt] action create
    - update content in file /hello.txt from ad4764 to 03675a
    --- /hello.txt	2019-01-09 14:31:04.664035952 +0000
    +++ /.chef-hello20190109-13137-1tnf86z.txt	2019-01-09 14:33:23.749035952 +0000
    @@ -1,2 +1,2 @@
    -Hello, WorldWelcome to Configuration Management by Keshav Kummari
    +Hello, World
    - restore selinux security context

Running handlers:
Running handlers complete
Chef Client finished, 1/1 resources updated in 03 seconds


STEP-4 : Validate now:

[vagrant@chefdk ~]$ cat /hello.txt
Hello, World
#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
Create a Workstation Setup Recipe :

# vi setup.rb

package 'tree' do
	action :install
end

package 'ntp'

file '/etc/motd' do
	content 'This server is the property of keshavkummari.com'
	action :create
	owner 'root'
	group 'root'
end

#------------------------------------------------------------------------------#
[vagrant@chefdk ~]$ cat setup1.rb
package 'tree' do
	action :install
end

package 'ntp'

file '/etc/motd' do
	content 'This server is the property of ...'
end

service 'ntpd' do
	action [:enable, :start]
end

[vagrant@chefdk ~]$ sudo chef-client --local-mode setup1.rb
[2019-01-09T16:48:18+00:00] WARN: No config file found or specified on command line, using command line options.
[2019-01-09T16:48:18+00:00] WARN: No cookbooks directory found at or above current directory.  Assuming /home/vagrant.
Starting Chef Client, version 14.8.12
resolving cookbooks for run list: []
Synchronizing Cookbooks:
Installing Cookbook Gems:
Compiling Cookbooks...
[2019-01-09T16:48:24+00:00] WARN: Node chefdk.keshavkummari.com has an empty run list.
Converging 4 resources
Recipe: @recipe_files::/home/vagrant/setup1.rb
  * yum_package[tree] action install (up to date)
  * yum_package[ntp] action install (up to date)
  * file[/etc/motd] action create (up to date)
  * service[ntpd] action enable
    - enable service service[ntpd]
  * service[ntpd] action start
    - start service service[ntpd]

Running handlers:
Running handlers complete
Chef Client finished, 2/5 resources updated in 12 seconds
#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
Overview : Cookbooks

A cookbook is the fundamental unit of configuration and policy distribution.

A cookbook defines a scenario and contains everything that is required to
support that scenario:

1. Recipes that specify the resources to use and the order in which they are to be applied
2. Attribute values
3. File distributions
4. Templates
5. Extensions to Chef, such as custom resources and libraries

The chef-client uses Ruby as its reference language for creating cookbooks and
defining recipes, with an extended DSL for specific resources.

The chef-client provides a reasonable set of resources, enough to support many
of the most common infrastructure automation scenarios;
however, this DSL can also be extended when additional resources and
capabilities are required.

#------------------------------------------------------------------------------#
Components:

Some important components of cookbooks include:

1. Attributes	:

An attribute can be defined in a cookbook (or a recipe) and then
used to override the default settings on a node.

When a cookbook is loaded during a chef-client run,
these attributes are compared to the attributes that are already present on the
node.

Attributes that are defined in attribute files are first loaded according to
cookbook order.

For each cookbook, attributes in the default.rb file are loaded first, and then
additional attribute files (if present) are loaded in lexical sort order.

When the cookbook attributes take precedence over the default attributes,
the chef-client will apply those new settings and values during the chef-client
run on the node.
#------------------------------------------------------------------------------#
2. Recipes :

A recipe is the most fundamental configuration element within the organisation.

A recipe:
Is authored using Ruby, which is a programming language designed to read and
behave in a predictable manner

Is mostly a collection of resources, defined using patterns (resource names,
attribute-value pairs, and actions); helper code is added around this using Ruby, when needed

Must define everything that is required to configure part of a system

Must be stored in a cookbook

May be included in another recipe

May use the results of a search query and read the contents of a data bag (including an encrypted data bag)

May have a dependency on one (or more) recipes

Must be added to a run-list before it can be used by the chef-client

Is always executed in the same order as listed in a run-list
#------------------------------------------------------------------------------#
The chef-client will run a recipe only when asked. When the chef-client runs
the same recipe more than once, the results will be the same system state each time.

When a recipe is run against a system, but nothing has changed on either the
system or in the recipe, the chef-client won’t change anything.

In addition to attributes and recipes, the following items are also part of cookbooks:

Components	Description
Files :
A file distribution is a specific type of resource that tells a cookbook how to distribute files,
including by node, by platform, or by file version.

Libraries :
A library allows the use of arbitrary Ruby code in a cookbook, either as a way
to extend the chef-client language or to implement a new class.

Custom Resources :
A custom resource is an abstract approach for defining a set of actions and
(for each action) a set of properties and validation parameters.

Metadata :
A metadata file is used to ensure that each cookbook is correctly deployed to each node.

Resources	:
A resource instructs the chef-client to complete various tasks like installing
packages, running Ruby code, or accessing directories and file systems.
The chef-client includes built-in resources that cover many common scenarios.
For the full list of resources that are built-in to the chef-client, see /resources.html.

Templates	:
A template is a file written in markup language that uses Ruby statements to
solve complex configuration scenarios.

Cookbook Versioning :
A cookbook version represents a set of functionality that is different from
the cookbook on which it is based.

A version may exist for many reasons, such as ensuring the correct use of a third-party component,
updating a bug fix, or adding an improvement.

A cookbook version is defined using syntax and operators, may be associated
with environments, cookbook metadata, and/or run-lists, and may be frozen
(to prevent unwanted updates from being made).
A cookbook version is maintained just like a cookbook, with regard to source
control, uploading it to the Chef server, and how the chef-client applies that
cookbook when configuring nodes.

#------------------------------------------------------------------------------#
Community Cookbooks :

Chef maintains a large collection of cookbooks. In addition, there are thousands
of cookbooks created and maintained by the community:

Cookbooks Maintained by Chef	: Chef maintains a collection of cookbooks that are
widely used by the community.

Cookbooks Maintained by the Community	: The community has authored thousands of
cookbooks, ranging from niche cookbooks that are used by only a few organisations
to cookbooks that are some of the most popular and are used by nearly everyone.

#------------------------------------------------------------------------------#
# Login to ChefDK Server & Execute :

# chef generate cookbook --help

# mkdir cookbooks

# ls -lrt

STEP-1 :

# chef generate cookbook cookbooks/workstation

[vagrant@chefdk ~]$ chef generate cookbook cookbooks/workstation
Generating cookbook workstation
- Ensuring correct cookbook file content
- Ensuring delivery configuration
- Ensuring correct delivery build cookbook content

Your cookbook is ready. Type `cd cookbooks/workstation` to enter it.

There are several commands you can run to get started locally developing and testing your cookbook.
Type `delivery local --help` to see a full list.

Why not start by writing a test? Tests for the default recipe are stored at:

test/integration/default/default_test.rb

If you'd prefer to dive right in, the default recipe can be found at:

recipes/default.rb


STEP-2 :

[vagrant@chefdk ~]$ tree
.
|-- chef
|-- cookbooks
|   `-- workstation
|       |-- Berksfile
|       |-- CHANGELOG.md
|       |-- chefignore
|       |-- LICENSE
|       |-- metadata.rb
|       |-- README.md
|       |-- recipes
|       |   `-- default.rb
|       |-- spec
|       |   |-- spec_helper.rb
|       |   `-- unit
|       |       `-- recipes
|       |           `-- default_spec.rb
|       `-- test
|           `-- integration
|               `-- default
|                   `-- default_test.rb
|-- hello.rb
|-- nodes [error opening dir]
|-- setup1.rb
`-- setup.rb

11 directories, 13 files


STEP-3 : Understand metadata.rb file :

[vagrant@chefdk ~]$ cat cookbooks/workstation/metadata.rb
name 'workstation'
maintainer 'The Authors'
maintainer_email 'you@example.com'
license 'All Rights Reserved'
description 'Installs/Configures workstation'
long_description 'Installs/Configures workstation'
version '0.1.0'
chef_version '>= 13.0'

# The `issues_url` points to the location where issues for this cookbook are
# tracked.  A `View Issues` link will be displayed on this cookbook's page when
# uploaded to a Supermarket.
#
# issues_url 'https://github.com/<insert_org_here>/workstation/issues'

# The `source_url` points to the development repository for this cookbook.  A
# `View Source` link will be displayed on this cookbook's page when uploaded to
# a Supermarket.
#
# source_url 'https://github.com/<insert_org_here>/workstation'


STEP-4 : README.md file :

[vagrant@chefdk ~]$ cat cookbooks/workstation/README.md
# workstation

TODO: Enter the cookbook description here.


STEP-5 : Read recipes/default.rb file:

[vagrant@chefdk ~]$ cat cookbooks/workstation/recipes/default.rb
#
# Cookbook:: workstation
# Recipe:: default
#
# Copyright:: 2019, The Authors, All Rights Reserved.

STEP-6 : For Test Driven approach for Unit Testing your code:

|       |-- spec
|       |   |-- spec_helper.rb
|       |   `-- unit
|       |       `-- recipes
|       |           `-- default_spec.rb

STEP-7 : For integration :

|       `-- test
|           `-- integration
|               `-- default
|                   `-- default_test.rb

STEP-8 : spec & test are included part of chefignore file and they will only
for local use.

|       |-- chefignore

STEP-9 : Move the setup.rb file in to cookbooks/workstation/recipes/ folder:

[vagrant@chefdk ~]$ cp -pv setup1.rb cookbooks/workstation/recipes/
'setup1.rb' -> 'cookbooks/workstation/recipes/setup1.rb'

[vagrant@chefdk ~]$ tree
.
|-- chef
|-- cookbooks
|   `-- workstation
|       |-- Berksfile
|       |-- CHANGELOG.md
|       |-- chefignore
|       |-- LICENSE
|       |-- metadata.rb
|       |-- README.md
|       |-- recipes
|       |   |-- default.rb
|       |   `-- setup1.rb
|       |-- spec
|       |   |-- spec_helper.rb
|       |   `-- unit
|       |       `-- recipes
|       |           `-- default_spec.rb
|       `-- test
|           `-- integration
|               `-- default
|                   `-- default_test.rb

#------------------------------------------------------------------------------#

#-------------------Code Repository & Version Control your ChefDK--------------#

STEP-1 : Generate SSH-Keys

[vagrant@chefdk workstation]$ ssh-keygen

STEP-2 : Read the Public Key:

[vagrant@chefdk workstation]$ cat /home/vagrant/.ssh/id_rsa.pub

STEP-3 : Go to github account and update the public key under settings.

STEP-4 : Go to ChefDK and Validate your git logins:

[vagrant@chefdk workstation]$ git config --global user.name "keshavkummari"
[vagrant@chefdk workstation]$ git config --global user.email "keshav.kummari@gmail.com"

STEP-5 : Execute Git Commands :

[vagrant@chefdk workstation]$ git init

[vagrant@chefdk workstation]$ git add .

[vagrant@chefdk workstation]$ git status

[vagrant@chefdk workstation]$ git commit -m "FirstCommit"

[vagrant@chefdk workstation]$ git remote add origin https://github.com/keshavkummari/cookbooks.git

[vagrant@chefdk workstation]$ git remote -v

[vagrant@chefdk workstation]$ git push -u origin master

[vagrant@chefdk workstation]$ git fetch

[vagrant@chefdk workstation]$ git pull

[vagrant@chefdk workstation]$ git pull https://github.com/keshavkummari/cookbooks.git master

[vagrant@chefdk workstation]$ git push -u origin master

STEP-6 : Go to github account validate your repository:

https://github.com/keshavkummari/cookbooks

#------------------------------------------------------------------------------#
Deploy an Apache WebServer :

Lab: Setting up a Web Server
  Use chef generate to create a cookbook named "apache".
  Write and apply a recipe named "server.rb" with the policy:

The package named 'httpd' is installed.

The file named '/var/www/html/index.html' is created with the content
'<h1>Hello, world!</h1>'

The service named 'httpd' is started and enabled.
  Apply the recipe with chef-client
  Verify the site is available by running curl localhost

STEP-1 : Return to the Home Directory

$ cd ~

STEP-2 : Create a Cookbook

$ chef generate cookbook cookbooks/apache

STEP-3 : Create a Apache Server Recipe :

chef generate recipe cookbooks/apache server

STEP-4 : Update the Server Recipe:

package 'httpd'
file '/var/www/html/index.html' do
 content '<h1>Hello, world!</h1>'
end
service 'httpd' do
 action [ :enable, :start ]
end


STEP-5 : Apply the Server Recipe

$ sudo chef-client -z cookbooks/apache/recipes/server.rb

STEP-6 : Verify That the Website is Available

$ curl localhost or ipaddress

or

$ elinks localhost or ipaddress

STEP-7 : Commit Your Work


#------------------------------------------------------------------------------#
[vagrant@chefdk ~]$ chef generate cookbook cookbooks/apache
Generating cookbook apache
- Ensuring correct cookbook file content
- Committing cookbook files to git
- Ensuring delivery configuration
- Ensuring correct delivery build cookbook content
- Adding delivery configuration to feature branch
- Adding build cookbook to feature branch
- Merging delivery content feature branch to master

Your cookbook is ready. Type `cd cookbooks/apache` to enter it.

There are several commands you can run to get started locally developing and testing your cookbook.
Type `delivery local --help` to see a full list.

Why not start by writing a test? Tests for the default recipe are stored at:

test/integration/default/default_test.rb

If you'd prefer to dive right in, the default recipe can be found at:

recipes/default.rb




[vagrant@chefdk ~]$ tree
.
|-- chef
|-- cookbooks
|   |-- apache
|   |   |-- Berksfile
|   |   |-- CHANGELOG.md
|   |   |-- chefignore
|   |   |-- LICENSE
|   |   |-- metadata.rb
|   |   |-- README.md
|   |   |-- recipes
|   |   |   `-- default.rb
|   |   |-- spec
|   |   |   |-- spec_helper.rb
|   |   |   `-- unit
|   |   |       `-- recipes
|   |   |           `-- default_spec.rb
|   |   `-- test
|   |       `-- integration
|   |           `-- default
|   |               `-- default_test.rb


[vagrant@chefdk ~]$ chef generate recipe cookbooks/apache server
Recipe: code_generator::recipe
  * directory[cookbooks/apache/spec/unit/recipes] action create (up to date)
  * cookbook_file[cookbooks/apache/spec/spec_helper.rb] action create_if_missing (up to date)
  * template[cookbooks/apache/spec/unit/recipes/server_spec.rb] action create_if_missing
    - create new file cookbooks/apache/spec/unit/recipes/server_spec.rb
    - update content in file cookbooks/apache/spec/unit/recipes/server_spec.rb from none to c2280c
    (diff output suppressed by config)
    - restore selinux security context
  * directory[cookbooks/apache/test/integration/default] action create (up to date)
  * template[cookbooks/apache/test/integration/default/server_test.rb] action create_if_missing
    - create new file cookbooks/apache/test/integration/default/server_test.rb
    - update content in file cookbooks/apache/test/integration/default/server_test.rb from none to 98e5c2
    (diff output suppressed by config)
    - restore selinux security context
  * template[cookbooks/apache/recipes/server.rb] action create
    - create new file cookbooks/apache/recipes/server.rb
    - update content in file cookbooks/apache/recipes/server.rb from none to 2bdb16
    (diff output suppressed by config)
    - restore selinux security context

[vagrant@chefdk ~]$ tree
.
|-- chef
|-- cookbooks
|   |-- apache
|   |   |-- Berksfile
|   |   |-- CHANGELOG.md
|   |   |-- chefignore
|   |   |-- LICENSE
|   |   |-- metadata.rb
|   |   |-- README.md
|   |   |-- recipes
|   |   |   |-- default.rb
|   |   |   `-- server.rb


[vagrant@chefdk ~]$ cat cookbooks/apache/recipes/server.rb
#
# Cookbook:: apache
# Recipe:: server
#
# Copyright:: 2019, The Authors, All Rights Reserved.

package 'httpd' do
	action :install
end

file '/var/www/html/index.html' do
	content '<h1>Hello, world!</h1>'
end

service 'httpd' do
	action [:enable,:start ]
end


[vagrant@chefdk ~]$ chef exec ruby -c cookbooks/apache/recipes/server.rb
Syntax OK


[vagrant@chefdk ~]$ sudo chef-client -z cookbooks/apache/recipes/server.rb
[2019-01-10T05:40:31+00:00] WARN: No config file found or specified on command line, using command line options.
Starting Chef Client, version 14.8.12
resolving cookbooks for run list: []
Synchronizing Cookbooks:
Installing Cookbook Gems:
Compiling Cookbooks...
[2019-01-10T05:40:38+00:00] WARN: Node chefdk.keshavkummari.com has an empty run list.
Converging 3 resources
Recipe: @recipe_files::/home/vagrant/cookbooks/apache/recipes/server.rb
  * yum_package[httpd] action install (up to date)
  * file[/var/www/html/index.html] action create
    - create new file /var/www/html/index.html
    - update content in file /var/www/html/index.html from none to 17d291
    --- /var/www/html/index.html	2019-01-10 05:40:40.826830278 +0000
    +++ /var/www/html/.chef-index20190110-7919-caw6h5.html	2019-01-10 05:40:40.826830278 +0000
    @@ -1 +1,2 @@
    +<h1>Hello, world!</h1>
    - restore selinux security context
  * service[httpd] action enable
    - enable service service[httpd]
  * service[httpd] action start
    - start service service[httpd]

Running handlers:
Running handlers complete
Chef Client finished, 3/4 resources updated in 06 seconds


[vagrant@chefdk ~]$ ifconfig | grep 192.168
        inet 192.168.33.10  netmask 255.255.255.0  broadcast 192.168.33.255

[vagrant@chefdk ~]$ curl 192.168.33.10
<h1>Hello, world!</h1>[vagrant@chefdk ~]$
[vagrant@chefdk ~]$

#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
