
#------------------------------------------------------------------------------#
Configuration Management Tool : Chef
#------------------------------------------------------------------------------#
What is Configuration Management?

Chef is an open-source infrastructure Automation framework that enables you to
define the state of your systems and automatically keep them that way.

Chef is code. Built on the Ruby programming language,
Chef recipes are meant to be simple and descriptive.

Chef can run on Windows, macOS, and many Linux distributions.

Although you can use Chef to configure almost any system.

Chef allows DevOps to spin off dozens or hundreds of server instances in less
time.

#------------------------------------------------------------------------------#
Chef Basics :

You can use Chef in any datacenter or cloud infrastructure.

It runs on several platforms, including Windows; enterprise Linux distributions;
AIX; FreeBSD; Solaris; Cisco IO; and Nexus.

Chef supports cloud platforms including
1. Amazon Web Services (AWS),
2. Google Cloud Platform,
3. OpenStack,
4. IBM Bluemix,
5. HPE Cloud,
6. Microsoft Azure,
7. VMware vRealize Automation, and
8. Rackspace.

The Chef workflow starts with a team’s developers and system administrators
defining a task to automate.

The recipes and cookbooks capture the process, and are tested using tools like
Test Kitchen, ChefSpec, and Foodcritic.

Once they’re working properly, the recipes and cookbooks are deployed to the
Chef server using the knife and chef command-line tools.

A typical Chef deployment comprises three core components:
the Chef server, workstations, and nodes.

On workstations, you create and edit the Chef recipes,
which are stored in cookbooks.

As the name suggests, a Chef cookbook is a collection of related recipes that
include configuration data and policy distribution.

The workstation also stores a library of your infrastructure’s configuration
documents.

When you’re happy with your recipes, you save them to the Chef server using
Chef Knife.

The Chef server is the repository for recipes, cookbooks, node policies, roles,
environments, and node metadata.

Policies map the organization’s business and operational requirements, process,
and workflow to settings and objects stored on the server.

Roles define server types, such as “web server” or “database server.”

Environments define the type of process, such as dev, staging, or production.

In short, the Chef server holds all your infrastructure’s configuration data.

#------------------------------------------------------------------------------#
Chef for DevOps:

Chef applies a continuous delivery model to the software release cycle by
automating its workflow.

System administration tasks are saved as cookbooks and recipes,
reusable configuration steps toward a desired state.

Chef has wide industry support across the cloud ecosystem,
and works with just about every platform you can think of.
#------------------------------------------------------------------------------#
Chef Fundamentals or Chef RoadMap :


1. Local Development

&

2. Cloud Development

Concepts :

Part-I:

1. Configuration Management
2. Chef Resources
3. Cookbooks
4. Chef Client & Convergence
5. Ohai
6. Templates
7. ChefDK

Part-II :
8. Chef Server
9. Supermarket
10. Custom cookbooks
11. Managing Nodes
12. Roles & Runlist
13. Indexing & Search
14. Cookbook Versions with Environments
15. Databags
#------------------------------------------------------------------------------#
1. Local Development Environment:

On MacOS/Windows :

Download, Install & Configure :

1. Text Editors : ATOM  (https://atom.io/)

2. Source Code Management Tool  :  Git (http://git-scm.com/downloads)

3. Integrated Development Tool : Visual Studio Code (https://code.visualstudio.com/)

4. Configuration Management Tool : Chef

5. Virtualisation Tool : Oracle Virtualbox (https://www.virtualbox.org/)

6. 3rd Party SSH Tools : Putty, Puttygen, WinScp, &
Cmder (https://github.com/cmderdev/cmder/releases/download/v1.3.11/cmder.zip)

7. Build and Manage Virtual Machines : Vagrant (https://www.vagrantup.com/downloads.html)
#------------------------------------------------------------------------------#
Download, Install and Configure Chef Development Kit(ChefDK) on MacOS:

STEP-1 : Chef Development Kit (Version 3.2.30)

https://downloads.chef.io/

$ chef --version
Chef Development Kit Version: 3.2.30
chef-client version: 14.4.56
delivery version: master (6862f27aba89109a9630f0b6c6798efec56b4efe)
berks version: 7.0.6
kitchen version: 1.23.2
inspec version: 2.2.70

$ chef --version
$ chef-client --version
$ knife --version
$ ohai --version
$ berks --version
$ kitchen --version
$ foodcritic --version
$ cookstyle --version

STEP-2 : Virtualisation Tool :

Oracle Virtualbox (https://www.virtualbox.org/)

STEP-3 : Build and Manage Virtual Machines :

Vagrant (https://www.vagrantup.com/downloads.html)

STEP-4 : Text Editors :

ATOM  (https://atom.io/)

STEP-5 : Source Code Management Tool  :

Git (http://git-scm.com/downloads)

STEP-6 : 3rd Party SSH Tools : Putty, Puttygen, WinScp, &
Cmder (https://github.com/cmderdev/cmder/releases/download/v1.3.11/cmder.zip)

STEP-7 : Integrated Development Tool : Pycahrm, VSTS,

Visual Studio Code (https://code.visualstudio.com/)
#------------------------------------------------------------------------------#
Setup Lab Environment with Vagrant :
(file:///Users/keshavkummari/Downloads/Vagrant-VirtualBox-Setup.pdf)

Chef Workflow :

When building and testing Chef code a normal workflow involves managing servers
directly from your workstation.

In this class, you’ll start by logging into a server directly to get to know the
 way Chef works.

In the second half of class, we’ll manage remote servers (nodes) using a workstation
connected to a Chef Server.

For now, we’ll start by managing a node using Vagrant and VirtualBox

Objectives:
• Check pre-reqs
• Verify your ssh client
• Install VirtualBox
• Install Vagrant
• Launch Centos VM

Ensure your system meets the minimum requirements :

1. Supports virtualisation. This is typically enabled in your BIOS

2. Meets the minimum requirements to run VirtualBox

3. Has at least 5GB of hard-disk space available

4. Has at least 512MB RAM available for each VM you would like to run
(this class may have a maximum of 3 VM’s running at any time,
so please ensure you have at least 1.5GB RAM available)

5. If using VMware Fusion, ensure nested virtualisation is enabled

Note : Class Workflow

For the first half of the class we will log into a Vagrant instance and
work with Chef by directly managing the virtual machine.

On the virtual CentOS instance we will install the Chef Development Kit (ChefDK)
and write code using a command-line text editor, like Vi, Emac or Nano.

In the second half of the class we will manage several Vagrant instances
remotely using a Chef Server.

For these exercises we will be using your local machine, where the
ChefDK will also be installed.

STEP-1 : Go to Local Machine(Laptop/Desktop) and Verify Vagrant :

$ vagrant -v
Vagrant 2.2.1

STEP-2 : Go to Local Machine(Laptop/Desktop) and Verify ChefDK :

$ chef --version
Chef Development Kit Version: 3.2.30
chef-client version: 14.4.56
delivery version: master (6862f27aba89109a9630f0b6c6798efec56b4efe)
berks version: 7.0.6
kitchen version: 1.23.2
inspec version: 2.2.70

STEP-3 : Go to Local Machine(Laptop/Desktop) and Verify VirtualBox :

$ VBoxManage --version
5.2.20r125813

Create a Workstation :
$ pwd
/Users/keshavkummari/chef_kk
$ ls -lrt
$
$ mkdir chefdk
$ mkdir chefserver
$ mkdir chefnode
$ ls -lrta
total 0
drwxrwxrwx+ 109 keshavkummari  staff  3488 Jan  9 13:02 ..
drwxr-xr-x    2 keshavkummari  staff    64 Jan  9 13:15 chefdk
drwxr-xr-x    2 keshavkummari  staff    64 Jan  9 13:15 chefserver
drwxr-xr-x    2 keshavkummari  staff    64 Jan  9 13:15 chefnode

STEP-4 : Register & Login to Vagrantup.com :

UserName : keshav.kummari@gmail.com
PassWord :

https://app.vagrantup.com/


$ vagrant login
WARNING: This command has been deprecated and aliased to `vagrant cloud auth login`
In a moment we will ask for your username and password to HashiCorp's
Vagrant Cloud. After authenticating, we will store an access token locally on
disk. Your login details will be transmitted over a secure connection, and
are never stored on disk locally.

If you do not have an Vagrant Cloud account, sign up at
https://www.vagrantcloud.com

Vagrant Cloud username or email: keshav.kummari@gmail.com
Password (will be hidden):
Token description (Defaults to "Vagrant login from Keshavs-MacBook-Pro.local"):
You are now logged in.
$


#------------------------------------------------------------------------------#
Vagrant boxes are just "Templates"
Boxes contain our base operating systems already setup.
Manage boxes such as:
# vagrant box list
# vagrant box add
# vagrant box remove

To see the list of the boxes are in the OS:

$ vagrant box list
bento/centos-7      (virtualbox, 201808.24.0)
bento/centos-7.2    (virtualbox, 2.3.1)
bento/centos-7.5    (virtualbox, 201808.24.0)
centos/7            (virtualbox, 1804.02)
centos/7            (virtualbox, 1809.01)
centos/7            (virtualbox, 1811.02)
clicars/ubuntu18lts (virtualbox, 2)
hashicorp/precise64 (virtualbox, 1.1.0)
ubuntu/trusty64     (virtualbox, 20181203.0.1)
ubuntu/xenial64     (virtualbox, 20180525.0.0)

To remove a box :
$ vagrant box remove bento/centos-7.2

$ vagrant status
/opt/vagrant/embedded/gems/2.2.1/gems/vagrant-2.2.1/lib/vagrant/util/which.rb:37:
warning: Insecure world writable dir /Users/keshavkummari in PATH, mode 040777
Current machine states:

default                   not created (virtualbox)

The environment has not yet been created. Run `vagrant up` to
create the environment. If a machine is not created, only the
default provider will be shown. So if a provider is not listed,
then the machine is not created for that environment.


Vagrant Commands:

Usage: vagrant box <subcommand> [<args>]

Available subcommands:
     add
     list
     outdated
     prune
     remove
     repackage
     update
#------------------------------------------------------------------------------#


STEP-5 : Go to Local Machine(Laptop/Desktop) & Download a CentOS7.2 Vagrant box:

$ vagrant box add bento/centos-7.2 --provider=virtualbox

$ vagrant box add bento/centos-7.2 --provider=virtualbox
/opt/vagrant/embedded/gems/2.2.1/gems/vagrant-2.2.1/lib/vagrant/util/which.rb:37:
warning: Insecure world writable dir /Users/keshavkummari in PATH, mode 040777
==> box: Loading metadata for box 'bento/centos-7.2'
    box: URL: https://vagrantcloud.com/bento/centos-7.2
==> box: Adding box 'bento/centos-7.2' (v2.3.1) for provider: virtualbox
The box you're attempting to add already exists. Remove it before
adding it again or add it with the `--force` flag.

Name: bento/centos-7.2
Provider: virtualbox
Version: 2.3.1

STEP-6 : Intialise the Vagrant box :

$ vagrant init bento/centos-7.2

$ pwd
/Users/keshavkummari/chef_kk/chefdk
$ vagrant init bento/centos-7.2
A `Vagrantfile` has been placed in this directory. You are now
ready to `vagrant up` your first virtual environment! Please read
the comments in the Vagrantfile as well as documentation on
`vagrantup.com` for more information on using Vagrant.

$ vi Vagrantfile

$ grep -n 'config.vm.network' Vagrantfile
26:  config.vm.network "forwarded_port", guest: 80, host: 8080
31:  config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"
35:  config.vm.network "private_network", ip: "192.168.33.10"
40:  # config.vm.network "public_network"

Note: Uncoment the "config.vm.network"

STEP-7 : Spin up a CentOS7.x using Vagrant :

$ vagrant up

STEP-8 : Log Into the CentOS 7.2 Instance

$ vagrant ssh
#------------------------------------------------------------------------------#
sudo rm -rf /var/www/html
sudo ln -fs /vargrant /var/www/html
#------------------------------------------------------------------------------#
Install Apache on Linux Server using Shell Script:

# vi provision.sh

#!/usr/bin/env bash

echo "Installing Apache and Setting Apache Up....Please wait"

#yum update -y > /dev/null 2>&1

yum install -y httpd > /dev/null 2>&1

cp -pvr /vagrant/* /var/www/html/

#rm -rf /var/www/html

#ln -fs /vagrant /var/www/html

systemctl start httpd.service

Go to Vagrantfile :

config.vm.provision "shell". path: "provision.sh"
#------------------------------------------------------------------------------#
Install Apache on Linux Server using chef:

# vi Vagrantfile

config.vm.provision "chef_solo" do |chef|
  chef.add_recipe "vagrant_la"
end

Create a cookbook folder:
# mkdir cookbook
# cd cookbook
# mkdir vagrant_la
# cd vagrant_la
# mkdir recipes
# cd recipes
# vi default.rb

execute "yum update -y"
package "httpd"
execute "rm -rf /var/www/html"
link "/var/www/html" do
  to "/vagrant"
end

If it's running, then first destroy and spin-up again:
# vagrant destroy
# vagrant up

#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
Install Apache on Linux Server using puppet:

# vi Vagrantfile

Vagrant.configure(2) do |config|
  config.vm.box = "precise64"
  config.vm.box_url = "http://files.vagrantup.com/precise64.box"

  # Setup for the WebServer
  config.vm.define "web" do |web|
    web.vm.hostname = "web"
    web.vm.box = "apache"
    web.vm.network "private_network", type: "dhcp"
    web.vm.network "forwarded_port", guest: 80, host:8080
    web.vm.provision "puppet" do |puppet|
      puppet.manifests_path = "manifests"
      puppet.manifest_file = "default.pp"

    end
end

  # Setup for MySQL DB Server
  config.vm.define "db" |db|
    db.vm.hostname = "db"
    db.vm.box = "mysql"
    db.vm.network "private_network", type: "dhcp"
end


# mkdir manifests
# cd manifests

vi default.pp

exec { "apt-get update":
  command = "/usr/bin/apt-get update",
}

package { "apache2":
        require => Exec["apt-get update"]
}

file { "/var/www":
        ensure => link,
        target => /vagrant,
        force  => true,
}

# vagrant up
#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
